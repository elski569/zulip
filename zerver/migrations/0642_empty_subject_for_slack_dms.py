# Generated by Django 5.0.9 on 2024-11-08 13:02

import time

from django.db import migrations
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from django.db.migrations.state import StateApps

BATCH_SIZE = 10000


def process_batch(apps: StateApps, id_start: int, id_end: int) -> None:
    RECIPIENT_PERSONAL = 1
    RECIPIENT_HUDDLE = 3

    Client = apps.get_model("zerver", "Client")
    Message = apps.get_model("zerver", "Message")

    # Fetch the ID of "populate_db" client which is the sending_client of imported messages
    internal_client, _ = Client.objects.get_or_create(name="populate_db")

    # Filter batch of messages that are imported from Slack
    messages_to_update = Message.objects.filter(
        id__gte=id_start,
        id__lte=id_end,
        sending_client_id=internal_client.id,
        recipient__type__in=[RECIPIENT_PERSONAL, RECIPIENT_HUDDLE],
    ).exclude(subject="")

    messages_to_update.update(subject="")


def update_dm_and_gdm_topic_name(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:
    Message = apps.get_model("zerver", "Message")
    if not Message.objects.exists():
        # Nothing to do, and Message.objects.latest() will crash.
        return

    last_id = Message.objects.latest("id").id

    id_range_lower_bound = 0
    id_range_upper_bound = 0 + BATCH_SIZE

    while id_range_lower_bound < last_id:
        process_batch(apps, id_range_lower_bound, id_range_upper_bound)
        print(f"Processed messages up to ID {id_range_upper_bound} / {last_id}")

        id_range_lower_bound = id_range_upper_bound
        id_range_upper_bound = min(id_range_lower_bound + BATCH_SIZE, last_id)

        time.sleep(0.1)


class Migration(migrations.Migration):
    atomic = False
    dependencies = [
        ("zerver", "0641_web_suggest_update_time_zone"),
    ]

    operations = [
        migrations.RunPython(update_dm_and_gdm_topic_name),
    ]
